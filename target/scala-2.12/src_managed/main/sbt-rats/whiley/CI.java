// ===========================================================================
// This file has been generated by
// Rats! Parser Generator, version 2.4.0,
// (C) 2004-2014 Robert Grimm,
// on Thursday, 5 September 2019 at 3:02:03 PM.
// Edit at your own risk.
// ===========================================================================

package whiley;

import java.io.Reader;
import java.io.IOException;

import java.util.HashSet;
import java.util.Set;

import xtc.util.Pair;
import scala.Option;
import scala.collection.immutable.Vector;
import sbtrats.ParserSupport;
import sbtrats.SVector;



import xtc.parser.ParserBase;
import xtc.parser.Column;
import xtc.parser.Result;
import xtc.parser.SemanticValue;
import xtc.parser.ParseError;

import whiley.CISyntax.*;

import sbtrats.Action;
import xtc.tree.Location;
import org.bitbucket.inkytonik.kiama.parsing.Input;
import org.bitbucket.inkytonik.kiama.util.FileSource;
import org.bitbucket.inkytonik.kiama.util.Message;
import org.bitbucket.inkytonik.kiama.util.Position;
import org.bitbucket.inkytonik.kiama.util.Positions;
import org.bitbucket.inkytonik.kiama.util.Source;

/**
 * Packrat parser for grammar <code>whiley.CI</code>.
 *
 * <p />This class has been generated by the <i>Rats!</i> parser
 * generator, version 2.4.0, (C) 2004-2014 Robert Grimm.
 */

public final class CI extends ParserBase {

  // =========================================================================

  /** The Kiama source from which input is being read. */
  protected Source source;

  /** The Kiama position store being used to track value positions. */
  protected Positions positions;

  /**
   * Create a new packrat parser.
   *
   * @param src The Kiama source to be parsed.
   * @param posns The store in which to keep track of parsed value positions.
   * @throws NullPointerException Signals a null file name.
   * @throws IllegalArgumentException Signals a negative file size.
   */
  public CI(final Source src, final Positions posns) {
      this(src, INIT_SIZE - 1, posns);
  }

  /**
   * Create a new packrat parser.
   *
   * @param src The Kiama source to be parsed.
   * @param size The length of the character stream.
   * @param posns The store in which to keep track of parsed value positions.
   * @throws NullPointerException Signals a null file name.
   * @throws IllegalArgumentException Signals a negative file size.
   */
  public CI(final Source src, final int size, final Positions posns) {
      this(src.reader(), src.optName().isEmpty() ? "" : src.optName().get(), size);
      source = src;
      positions = posns;
  }

  /** Set start position of an Object to one that corresponds to a start
   *  index and the finish position to the one that corresponds to the
   *  current parsing index. */
  void setLocation(final Object object, final int start) {
    if (null != object) {
      Column s = column(start);
      positions.setStart(object, new Position(s.line, s.column, source));
      int finish = yyCount == 0 ? 0 : yyCount - 1;
      Column f = column(finish);
      positions.setFinish(object, new Position(f.line, f.column, source));
    }
  }

  /** Set the start position of an Object to the start position of
   *  another object and the finish position to one that corresponds to
   *  the current parsing index. If the source object doesn't have a
   *  start position, do nothing. */
  void copyLocation(final Object object, final Object another) {
    if ((null != object) && (null != another)) {
      scala.Option<Position> optStart = positions.getStart(another);
      if (!optStart.isEmpty()) {
        scala.Option<Object> optOffset = optStart.get().optOffset();
        if (!optOffset.isEmpty())
          setLocation(object, ((Integer)optOffset.get()).intValue());
      }
    }
  }

  /** Return a Kiama message for a given parse error. */
  public Message errorToMessage(ParseError error) {
    Location loc = location(error.index);
    Position pos = new Position(loc.line, loc.column, source);
    positions.setStart(error, pos);
    positions.setFinish(error, pos);
    return new Message(error, error.msg);
  }

  /** Return a Kiama input for a given parse index. */
  public Input indexToInput(int index) {
    return new Input(source, index);
  }


  /** The KEYWORDS set. */
  public static final Set<String> KEYWORDS = new HashSet<String>();

  // =========================================================================

  /** Chunk 1 of memoized results. */
  static final class Chunk1 {
    Result fSymbol1;
    Result fSymbol13;
    Result fSymbol2;
    Result fSymbol11;
    Result fStm;
    Result fStm$$Star1;
    Result fStm$$Star2;
    Result fStm$$Star3;
    Result fStm$$Star4;
    Result fStm$$Star5;
  }

  /** Chunk 2 of memoized results. */
  static final class Chunk2 {
    Result fType;
    Result fExp;
    Result fAssign;
    Result fLoc;
    Result fExpLevel0;
    Result fExpLevel1;
    Result fExpLevel1$$Star1;
    Result fExpLevel2;
    Result fExpLevel2$$Star1;
    Result fExpLevel3;
  }

  /** Chunk 3 of memoized results. */
  static final class Chunk3 {
    Result fExpLevel3$$Star1;
    Result fExpLevel4;
    Result fExpLevel4$$Star1;
    Result fIdentifier;
    Result fWord;
  }

  // =========================================================================

  /** Memoization table column. */
  static final class CIColumn extends Column {
    Chunk1 chunk1;
    Chunk2 chunk2;
    Chunk3 chunk3;
  }

  // =========================================================================

  /**
   * Create a new packrat parser.
   *
   * @param reader The reader.
   * @param file The file name.
   */
  public CI(final Reader reader, final String file) {
    super(reader, file);
  }

  /**
   * Create a new packrat parser.
   *
   * @param reader The file reader.
   * @param file The file name.
   * @param size The file size.
   */
  public CI(final Reader reader, final String file, final int size) {
    super(reader, file, size);
  }

  // =========================================================================

  protected Column newColumn() {
    return new CIColumn();
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol14.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol14(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol14Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol14Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol14Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('u' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('n' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('s' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('i' == yyC) {
            yyIndex = yyIndex + 1;

            yyC = character(yyIndex);
            if ('g' == yyC) {
              yyIndex = yyIndex + 1;

              yyC = character(yyIndex);
              if ('n' == yyC) {
                yyIndex = yyIndex + 1;

                yyC = character(yyIndex);
                if ('e' == yyC) {
                  yyIndex = yyIndex + 1;

                  yyC = character(yyIndex);
                  if ('d' == yyC) {
                    yyIndex = yyIndex + 1;

                    yyC = character(yyIndex);
                    if (' ' == yyC) {
                      yyIndex = yyIndex + 1;

                      yyC = character(yyIndex);
                      if ('s' == yyC) {
                        yyIndex = yyIndex + 1;

                        yyC = character(yyIndex);
                        if ('h' == yyC) {
                          yyIndex = yyIndex + 1;

                          yyC = character(yyIndex);
                          if ('o' == yyC) {
                            yyIndex = yyIndex + 1;

                            yyC = character(yyIndex);
                            if ('r' == yyC) {
                              yyIndex = yyIndex + 1;

                              yyC = character(yyIndex);
                              if ('t' == yyC) {
                                yyIndex = yyIndex + 1;

                                yyValue = "unsigned short";

                                return new SemanticValue(yyValue, yyIndex, yyError);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("symbol14 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol1(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fSymbol1) 
      yyColumn.chunk1.fSymbol1 = pSymbol1$1(yyStart);
    return yyColumn.chunk1.fSymbol1;
  }

  /** Actually parse whiley.CI.Symbol1. */
  private Result pSymbol1$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol1Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol1Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '*':
        {
          yyValue = "*";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '%':
        {
          yyValue = "%";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '}':
        {
          yyValue = "}";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '=':
        {
          yyValue = "=";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '<':
        {
          yyValue = "<";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '!':
        {
          yyValue = "!";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ')':
        {
          yyValue = ")";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '-':
        {
          yyValue = "-";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ',':
        {
          yyValue = ",";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ';':
        {
          yyValue = ";";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '\'':
        {
          yyValue = "\'";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '{':
        {
          yyValue = "{";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '0':
        {
          yyValue = "0";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '+':
        {
          yyValue = "+";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '(':
        {
          yyValue = "(";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ':':
        {
          yyValue = ":";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '/':
        {
          yyValue = "/";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '>':
        {
          yyValue = ">";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("symbol1 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol13.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol13(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fSymbol13) 
      yyColumn.chunk1.fSymbol13 = pSymbol13$1(yyStart);
    return yyColumn.chunk1.fSymbol13;
  }

  /** Actually parse whiley.CI.Symbol13. */
  private Result pSymbol13$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol13Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol13Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol13Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;
      if ('u' == yyC) {

        yyC = character(yyIndex);
        if (-1 != yyC) {
          yyIndex = yyIndex + 1;
          if ('n' == yyC) {

            yyC = character(yyIndex);
            if (-1 != yyC) {
              yyIndex = yyIndex + 1;
              if ('s' == yyC) {

                yyC = character(yyIndex);
                if (-1 != yyC) {
                  yyIndex = yyIndex + 1;
                  if ('i' == yyC) {

                    yyC = character(yyIndex);
                    if (-1 != yyC) {
                      yyIndex = yyIndex + 1;
                      if ('g' == yyC) {

                        yyC = character(yyIndex);
                        if (-1 != yyC) {
                          yyIndex = yyIndex + 1;
                          if ('n' == yyC) {

                            yyC = character(yyIndex);
                            if (-1 != yyC) {
                              yyIndex = yyIndex + 1;
                              if ('e' == yyC) {

                                yyC = character(yyIndex);
                                if (-1 != yyC) {
                                  yyIndex = yyIndex + 1;
                                  if ('d' == yyC) {

                                    yyC = character(yyIndex);
                                    if (-1 != yyC) {
                                      yyIndex = yyIndex + 1;
                                      if (' ' == yyC) {

                                        yyC = character(yyIndex);
                                        if (-1 != yyC) {
                                          yyIndex = yyIndex + 1;

                                          switch (yyC) {
                                          case 'c':
                                            {
                                              yyC = character(yyIndex);
                                              if (-1 != yyC) {
                                                yyIndex = yyIndex + 1;
                                                if ('h' == yyC) {

                                                  yyC = character(yyIndex);
                                                  if (-1 != yyC) {
                                                    yyIndex = yyIndex + 1;
                                                    if ('a' == yyC) {

                                                      yyC = 
                                                        character(yyIndex);
                                                      if (-1 != yyC) {
                                                        yyIndex = yyIndex + 1;
                                                        if ('r' == yyC) {

                                                          yyValue = "unsigned char";

                                                          return new SemanticValue(yyValue, yyIndex, yyError);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            break;

                                          case 'l':
                                            {
                                              yyC = character(yyIndex);
                                              if (-1 != yyC) {
                                                yyIndex = yyIndex + 1;
                                                if ('o' == yyC) {

                                                  yyC = character(yyIndex);
                                                  if (-1 != yyC) {
                                                    yyIndex = yyIndex + 1;
                                                    if ('n' == yyC) {

                                                      yyC = 
                                                        character(yyIndex);
                                                      if (-1 != yyC) {
                                                        yyIndex = yyIndex + 1;
                                                        if ('g' == yyC) {

                                                          yyValue = "unsigned long";

                                                          return new SemanticValue(yyValue, yyIndex, yyError);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            break;

                                          default:
                                            /* No match. */
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("symbol13 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol2.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol2(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fSymbol2) 
      yyColumn.chunk1.fSymbol2 = pSymbol2$1(yyStart);
    return yyColumn.chunk1.fSymbol2;
  }

  /** Actually parse whiley.CI.Symbol2. */
  private Result pSymbol2$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol2Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol2Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol2Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '<':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;

            switch (yyC) {
            case '=':
              {
                yyValue = "<=";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            case '<':
              {
                yyValue = "<<";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            default:
              /* No match. */
            }
          }
        }
        break;

      case '>':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;

            switch (yyC) {
            case '=':
              {
                yyValue = ">=";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            case '>':
              {
                yyValue = ">>";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            default:
              /* No match. */
            }
          }
        }
        break;

      case '+':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('+' == yyC) {

              yyValue = "++";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '=':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "==";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '!':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "!=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '-':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('-' == yyC) {

              yyValue = "--";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("symbol2 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol12.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol12(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol12Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol12Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol12Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('u' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('n' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('s' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('i' == yyC) {
            yyIndex = yyIndex + 1;

            yyC = character(yyIndex);
            if ('g' == yyC) {
              yyIndex = yyIndex + 1;

              yyC = character(yyIndex);
              if ('n' == yyC) {
                yyIndex = yyIndex + 1;

                yyC = character(yyIndex);
                if ('e' == yyC) {
                  yyIndex = yyIndex + 1;

                  yyC = character(yyIndex);
                  if ('d' == yyC) {
                    yyIndex = yyIndex + 1;

                    yyC = character(yyIndex);
                    if (' ' == yyC) {
                      yyIndex = yyIndex + 1;

                      yyC = character(yyIndex);
                      if ('i' == yyC) {
                        yyIndex = yyIndex + 1;

                        yyC = character(yyIndex);
                        if ('n' == yyC) {
                          yyIndex = yyIndex + 1;

                          yyC = character(yyIndex);
                          if ('t' == yyC) {
                            yyIndex = yyIndex + 1;

                            yyValue = "unsigned int";

                            return new SemanticValue(yyValue, yyIndex, yyError);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("symbol12 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol11.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol11(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fSymbol11) 
      yyColumn.chunk1.fSymbol11 = pSymbol11$1(yyStart);
    return yyColumn.chunk1.fSymbol11;
  }

  /** Actually parse whiley.CI.Symbol11. */
  private Result pSymbol11$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol11Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Symbol11Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol11Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case 'l':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('o' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if ('n' == yyC) {

                  yyC = character(yyIndex);
                  if (-1 != yyC) {
                    yyIndex = yyIndex + 1;
                    if ('g' == yyC) {

                      yyC = character(yyIndex);
                      if (-1 != yyC) {
                        yyIndex = yyIndex + 1;
                        if (' ' == yyC) {

                          yyC = character(yyIndex);
                          if (-1 != yyC) {
                            yyIndex = yyIndex + 1;
                            if ('d' == yyC) {

                              yyC = character(yyIndex);
                              if (-1 != yyC) {
                                yyIndex = yyIndex + 1;
                                if ('o' == yyC) {

                                  yyC = character(yyIndex);
                                  if (-1 != yyC) {
                                    yyIndex = yyIndex + 1;
                                    if ('u' == yyC) {

                                      yyC = character(yyIndex);
                                      if (-1 != yyC) {
                                        yyIndex = yyIndex + 1;
                                        if ('b' == yyC) {

                                          yyC = character(yyIndex);
                                          if (-1 != yyC) {
                                            yyIndex = yyIndex + 1;
                                            if ('l' == yyC) {

                                              yyC = character(yyIndex);
                                              if (-1 != yyC) {
                                                yyIndex = yyIndex + 1;
                                                if ('e' == yyC) {

                                                  yyValue = "long double";

                                                  return new SemanticValue(yyValue, yyIndex, yyError);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        break;

      case 's':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('i' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if ('g' == yyC) {

                  yyC = character(yyIndex);
                  if (-1 != yyC) {
                    yyIndex = yyIndex + 1;
                    if ('n' == yyC) {

                      yyC = character(yyIndex);
                      if (-1 != yyC) {
                        yyIndex = yyIndex + 1;
                        if ('e' == yyC) {

                          yyC = character(yyIndex);
                          if (-1 != yyC) {
                            yyIndex = yyIndex + 1;
                            if ('d' == yyC) {

                              yyC = character(yyIndex);
                              if (-1 != yyC) {
                                yyIndex = yyIndex + 1;
                                if (' ' == yyC) {

                                  yyC = character(yyIndex);
                                  if (-1 != yyC) {
                                    yyIndex = yyIndex + 1;
                                    if ('c' == yyC) {

                                      yyC = character(yyIndex);
                                      if (-1 != yyC) {
                                        yyIndex = yyIndex + 1;
                                        if ('h' == yyC) {

                                          yyC = character(yyIndex);
                                          if (-1 != yyC) {
                                            yyIndex = yyIndex + 1;
                                            if ('a' == yyC) {

                                              yyC = character(yyIndex);
                                              if (-1 != yyC) {
                                                yyIndex = yyIndex + 1;
                                                if ('r' == yyC) {

                                                  yyValue = "signed char";

                                                  return new SemanticValue(yyValue, yyIndex, yyError);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("symbol11 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Program.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pProgram(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    Vector<Stm>  yyRepValue1;
    Program    yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSpacing(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyRepetition1 = yyResult.index;
      yyRepValue1   = SVector.empty();
      while (true) {

        yyResult = pStm(yyRepetition1);
        yyError  = yyResult.select(yyError, yyRepetition1);
        if (yyResult.hasValue()) {
          Stm v$el$1 = yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = SVector.create(v$el$1, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v1.
        Vector<Stm> v1 = SVector.reverse(yyRepValue1);

        yyResult = pEOF(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {

          yyValue = new Program (v1);

          if (yyValue instanceof Object) {
            setLocation((Object)yyValue, yyStart);
          }
          return yyResult.createValue(yyValue, yyError);
        }
      } // End scope for v1.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Stm.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pStm(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fStm) yyColumn.chunk1.fStm = pStm$1(yyStart);
    return yyColumn.chunk1.fStm;
  }

  /** Actually parse whiley.CI.Stm. */
  private Result pStm$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    Stm        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pType(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Type v1 = yyResult.semanticValue();

      yyResult = pLoc(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Loc v2 = yyResult.semanticValue();

        final int yyChoice1 = yyResult.index;

        // Nested alternative 1.

        yyBase   = yyChoice1;
        yyResult = pSymbol1(yyBase);
        if (yyResult.hasValue("=")) {

          yyResult = pExp(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Exp v3 = yyResult.semanticValue();

            yyBase   = yyResult.index;
            yyResult = pSymbol1(yyBase);
            if (yyResult.hasValue(";")) {

              yyValue = new DeclAsgnC (v1, v2, v3);

              if (yyValue instanceof Object) {
                setLocation((Object)yyValue, yyStart);
              }
              return yyResult.createValue(yyValue, yyError);
            } else {
              yyError = yyError.select("';' expected", yyBase);
            }
          }
        } else {
          yyError = yyError.select("'=' expected", yyBase);
        }

        // Nested alternative 2.

        yyBase   = yyChoice1;
        yyResult = pSymbol1(yyBase);
        if (yyResult.hasValue(";")) {

          yyValue = new DeclC (v1, v2);

          if (yyValue instanceof Object) {
            setLocation((Object)yyValue, yyStart);
          }
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("';' expected", yyBase);
        }
      }
    }

    // Alternative 2.

    yyResult = pAssign(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyValue = new AsgnC (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 3.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("if")) {

      yyBase   = yyResult.index;
      yyResult = pSymbol1(yyBase);
      if (yyResult.hasValue("(")) {

        yyResult = pExp(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Exp v1 = yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol1(yyBase);
          if (yyResult.hasValue(")")) {

            yyBase   = yyResult.index;
            yyResult = pSymbol1(yyBase);
            if (yyResult.hasValue("{")) {

              yyResult = pStm$$Star1(yyResult.index);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Vector<Stm> v2 = yyResult.semanticValue();

                yyBase   = yyResult.index;
                yyResult = pSymbol1(yyBase);
                if (yyResult.hasValue("}")) {

                  yyValue = new IfC (v1, v2);

                  if (yyValue instanceof Object) {
                    setLocation((Object)yyValue, yyStart);
                  }
                  return yyResult.createValue(yyValue, yyError);
                } else {
                  yyError = yyError.select("'}' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'{' expected", yyBase);
            }
          } else {
            yyError = yyError.select("')' expected", yyBase);
          }
        }
      } else {
        yyError = yyError.select("'(' expected", yyBase);
      }
    }

    // Alternative 4.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("switch")) {

      yyBase   = yyResult.index;
      yyResult = pSymbol1(yyBase);
      if (yyResult.hasValue("(")) {

        yyResult = pExp(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Exp v1 = yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol1(yyBase);
          if (yyResult.hasValue(")")) {

            yyBase   = yyResult.index;
            yyResult = pSymbol1(yyBase);
            if (yyResult.hasValue("{")) {

              yyResult = pStm$$Star2(yyResult.index);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Vector<CaseStmC> v2 = yyResult.semanticValue();

                yyBase   = yyResult.index;
                yyResult = pSymbol1(yyBase);
                if (yyResult.hasValue("}")) {

                  yyValue = new SwitchC (v1, v2);

                  if (yyValue instanceof Object) {
                    setLocation((Object)yyValue, yyStart);
                  }
                  return yyResult.createValue(yyValue, yyError);
                } else {
                  yyError = yyError.select("'}' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'{' expected", yyBase);
            }
          } else {
            yyError = yyError.select("')' expected", yyBase);
          }
        }
      } else {
        yyError = yyError.select("'(' expected", yyBase);
      }
    }

    // Alternative 5.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("while")) {

      yyBase   = yyResult.index;
      yyResult = pSymbol1(yyBase);
      if (yyResult.hasValue("(")) {

        yyResult = pExp(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Exp v1 = yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol1(yyBase);
          if (yyResult.hasValue(")")) {

            yyBase   = yyResult.index;
            yyResult = pSymbol1(yyBase);
            if (yyResult.hasValue("{")) {

              yyResult = pStm$$Star3(yyResult.index);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Vector<Stm> v2 = yyResult.semanticValue();

                yyBase   = yyResult.index;
                yyResult = pSymbol1(yyBase);
                if (yyResult.hasValue("}")) {

                  yyValue = new WhileC (v1, v2);

                  if (yyValue instanceof Object) {
                    setLocation((Object)yyValue, yyStart);
                  }
                  return yyResult.createValue(yyValue, yyError);
                } else {
                  yyError = yyError.select("'}' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'{' expected", yyBase);
            }
          } else {
            yyError = yyError.select("')' expected", yyBase);
          }
        }
      } else {
        yyError = yyError.select("'(' expected", yyBase);
      }
    }

    // Alternative 6.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("do")) {

      yyBase   = yyResult.index;
      yyResult = pSymbol1(yyBase);
      if (yyResult.hasValue("{")) {

        yyResult = pStm$$Star4(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Vector<Stm> v1 = yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol1(yyBase);
          if (yyResult.hasValue("}")) {

            yyBase   = yyResult.index;
            yyResult = pWord(yyBase);
            if (yyResult.hasValue("while")) {

              yyBase   = yyResult.index;
              yyResult = pSymbol1(yyBase);
              if (yyResult.hasValue("(")) {

                yyResult = pExp(yyResult.index);
                yyError  = yyResult.select(yyError);
                if (yyResult.hasValue()) {
                  Exp v2 = yyResult.semanticValue();

                  yyBase   = yyResult.index;
                  yyResult = pSymbol1(yyBase);
                  if (yyResult.hasValue(")")) {

                    yyValue = new DoWhileC (v1, v2);

                    if (yyValue instanceof Object) {
                      setLocation((Object)yyValue, yyStart);
                    }
                    return yyResult.createValue(yyValue, yyError);
                  } else {
                    yyError = yyError.select("')' expected", yyBase);
                  }
                }
              } else {
                yyError = yyError.select("'(' expected", yyBase);
              }
            } else {
              yyError = yyError.select("'while' expected", yyBase);
            }
          } else {
            yyError = yyError.select("'}' expected", yyBase);
          }
        }
      } else {
        yyError = yyError.select("'{' expected", yyBase);
      }
    }

    // Alternative 7.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("for")) {

      yyBase   = yyResult.index;
      yyResult = pSymbol1(yyBase);
      if (yyResult.hasValue("(")) {

        yyResult = pType(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Type v1 = yyResult.semanticValue();

          yyResult = pLoc(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Loc v2 = yyResult.semanticValue();

            yyBase   = yyResult.index;
            yyResult = pSymbol1(yyBase);
            if (yyResult.hasValue("=")) {

              yyResult = pExp(yyResult.index);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Exp v3 = yyResult.semanticValue();

                yyBase   = yyResult.index;
                yyResult = pSymbol1(yyBase);
                if (yyResult.hasValue(";")) {

                  yyResult = pExp(yyResult.index);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Exp v4 = yyResult.semanticValue();

                    yyBase   = yyResult.index;
                    yyResult = pSymbol1(yyBase);
                    if (yyResult.hasValue(";")) {

                      yyResult = pExp(yyResult.index);
                      yyError  = yyResult.select(yyError);
                      if (yyResult.hasValue()) {
                        Exp v5 = yyResult.semanticValue();

                        yyBase   = yyResult.index;
                        yyResult = pSymbol1(yyBase);
                        if (yyResult.hasValue(")")) {

                          yyValue = new ForC (v1, v2, v3, v4, v5);

                          if (yyValue instanceof Object) {
                            setLocation((Object)yyValue, yyStart);
                          }
                          return yyResult.createValue(yyValue, yyError);
                        } else {
                          yyError = yyError.select("')' expected", yyBase);
                        }
                      }
                    } else {
                      yyError = yyError.select("';' expected", yyBase);
                    }
                  }
                } else {
                  yyError = yyError.select("';' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'=' expected", yyBase);
            }
          }
        }
      } else {
        yyError = yyError.select("'(' expected", yyBase);
      }
    }

    // Alternative 8.

    yyResult = pType(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Type v1 = yyResult.semanticValue();

      yyResult = pLoc(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Loc v2 = yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol1(yyBase);
        if (yyResult.hasValue("(")) {

          yyResult = pParametersC(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            ParametersC v3 = yyResult.semanticValue();

            yyBase   = yyResult.index;
            yyResult = pSymbol1(yyBase);
            if (yyResult.hasValue(")")) {

              yyBase   = yyResult.index;
              yyResult = pSymbol1(yyBase);
              if (yyResult.hasValue("{")) {

                yyResult = pStm$$Star5(yyResult.index);
                yyError  = yyResult.select(yyError);
                if (yyResult.hasValue()) {
                  Vector<Stm> v4 = yyResult.semanticValue();

                  yyBase   = yyResult.index;
                  yyResult = pSymbol1(yyBase);
                  if (yyResult.hasValue("}")) {

                    yyValue = new FunctionDeclC (v1, v2, v3, v4);

                    if (yyValue instanceof Object) {
                      setLocation((Object)yyValue, yyStart);
                    }
                    return yyResult.createValue(yyValue, yyError);
                  } else {
                    yyError = yyError.select("'}' expected", yyBase);
                  }
                }
              } else {
                yyError = yyError.select("'{' expected", yyBase);
              }
            } else {
              yyError = yyError.select("')' expected", yyBase);
            }
          }
        } else {
          yyError = yyError.select("'(' expected", yyBase);
        }
      }
    }

    // Alternative 9.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("return")) {

      yyResult = pExp(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Exp v1 = yyResult.semanticValue();

        yyValue = new ReturnC (v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 10.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("break")) {

      yyValue = new BreakC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("stm expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal whiley.CI.Stm$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStm$$Star1(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fStm$$Star1) 
      yyColumn.chunk1.fStm$$Star1 = pStm$$Star1$1(yyStart);
    return yyColumn.chunk1.fStm$$Star1;
  }

  /** Actually parse whiley.CI.Stm$$Star1. */
  private Result pStm$$Star1$1(final int yyStart) throws IOException {
    Result     yyResult;
    Vector<Stm>  yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pStm(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Stm v$el$1 = yyResult.semanticValue();

      yyResult = pStm$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Stm> v$2 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal whiley.CI.Stm$$Star2.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStm$$Star2(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fStm$$Star2) 
      yyColumn.chunk1.fStm$$Star2 = pStm$$Star2$1(yyStart);
    return yyColumn.chunk1.fStm$$Star2;
  }

  /** Actually parse whiley.CI.Stm$$Star2. */
  private Result pStm$$Star2$1(final int yyStart) throws IOException {
    Result         yyResult;
    Vector<CaseStmC> yyValue;
    ParseError     yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pCaseStmC(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      CaseStmC v$el$3 = yyResult.semanticValue();

      yyResult = pStm$$Star2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<CaseStmC> v$4 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$3, v$4);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal whiley.CI.Stm$$Star3.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStm$$Star3(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fStm$$Star3) 
      yyColumn.chunk1.fStm$$Star3 = pStm$$Star3$1(yyStart);
    return yyColumn.chunk1.fStm$$Star3;
  }

  /** Actually parse whiley.CI.Stm$$Star3. */
  private Result pStm$$Star3$1(final int yyStart) throws IOException {
    Result     yyResult;
    Vector<Stm>  yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pStm(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Stm v$el$5 = yyResult.semanticValue();

      yyResult = pStm$$Star3(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Stm> v$6 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$5, v$6);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal whiley.CI.Stm$$Star4.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStm$$Star4(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fStm$$Star4) 
      yyColumn.chunk1.fStm$$Star4 = pStm$$Star4$1(yyStart);
    return yyColumn.chunk1.fStm$$Star4;
  }

  /** Actually parse whiley.CI.Stm$$Star4. */
  private Result pStm$$Star4$1(final int yyStart) throws IOException {
    Result     yyResult;
    Vector<Stm>  yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pStm(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Stm v$el$7 = yyResult.semanticValue();

      yyResult = pStm$$Star4(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Stm> v$8 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$7, v$8);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal whiley.CI.Stm$$Star5.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStm$$Star5(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fStm$$Star5) 
      yyColumn.chunk1.fStm$$Star5 = pStm$$Star5$1(yyStart);
    return yyColumn.chunk1.fStm$$Star5;
  }

  /** Actually parse whiley.CI.Stm$$Star5. */
  private Result pStm$$Star5$1(final int yyStart) throws IOException {
    Result     yyResult;
    Vector<Stm>  yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pStm(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Stm v$el$9 = yyResult.semanticValue();

      yyResult = pStm$$Star5(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Stm> v$10 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$9, v$10);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Type.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pType(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fType) 
      yyColumn.chunk2.fType = pType$1(yyStart);
    return yyColumn.chunk2.fType;
  }

  /** Actually parse whiley.CI.Type. */
  private Result pType$1(final int yyStart) throws IOException {
    Result     yyResult;
    Type       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("char")) {

      yyValue = new CharTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pSymbol13(yyStart);
    if (yyResult.hasValue("unsigned char")) {

      yyValue = new UnsgnCharTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 3.

    yyResult = pSymbol11(yyStart);
    if (yyResult.hasValue("signed char")) {

      yyValue = new SgnCharTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 4.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("int")) {

      yyValue = new IntTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 5.

    yyResult = pSymbol12(yyStart);
    if (yyResult.hasValue("unsigned int")) {

      yyValue = new UnsgnIntTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 6.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("short")) {

      yyValue = new ShortTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 7.

    yyResult = pSymbol14(yyStart);
    if (yyResult.hasValue("unsigned short")) {

      yyValue = new UnsgnShortTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 8.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("long")) {

      yyValue = new LongTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 9.

    yyResult = pSymbol13(yyStart);
    if (yyResult.hasValue("unsigned long")) {

      yyValue = new UnsgnLongTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 10.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("float")) {

      yyValue = new FloatTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 11.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("double")) {

      yyValue = new DoubleTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 12.

    yyResult = pSymbol11(yyStart);
    if (yyResult.hasValue("long double")) {

      yyValue = new LongDoubleTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 13.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("void")) {

      yyValue = new VoidTypeC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("type expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Exp.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pExp(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fExp) yyColumn.chunk2.fExp = pExp$1(yyStart);
    return yyColumn.chunk2.fExp;
  }

  /** Actually parse whiley.CI.Exp. */
  private Result pExp$1(final int yyStart) throws IOException {
    Result     yyResult;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpLevel5(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyValue = v1;

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Assign.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pAssign(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fAssign) 
      yyColumn.chunk2.fAssign = pAssign$1(yyStart);
    return yyColumn.chunk2.fAssign;
  }

  /** Actually parse whiley.CI.Assign. */
  private Result pAssign$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pLoc(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Loc v1 = yyResult.semanticValue();

      yyBase   = yyResult.index;
      yyResult = pSymbol1(yyBase);
      if (yyResult.hasValue("=")) {

        yyResult = pExp(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Exp v2 = yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol1(yyBase);
          if (yyResult.hasValue(";")) {

            yyValue = new Assign (v1, v2);

            if (yyValue instanceof Object) {
              setLocation((Object)yyValue, yyStart);
            }
            return yyResult.createValue(yyValue, yyError);
          } else {
            yyError = yyError.select("';' expected", yyBase);
          }
        }
      } else {
        yyError = yyError.select("'=' expected", yyBase);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Increment.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pIncrement(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pLoc(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Loc v1 = yyResult.semanticValue();

      yyBase   = yyResult.index;
      yyResult = pSymbol2(yyBase);
      if (yyResult.hasValue("++")) {

        yyValue = new Increment (v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      } else {
        yyError = yyError.select("'++' expected", yyBase);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Decrement.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pDecrement(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pLoc(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Loc v1 = yyResult.semanticValue();

      yyBase   = yyResult.index;
      yyResult = pSymbol2(yyBase);
      if (yyResult.hasValue("--")) {

        yyValue = new Decrement (v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      } else {
        yyError = yyError.select("'--' expected", yyBase);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.CaseStmC.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pCaseStmC(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    Vector<Stm>  yyRepValue1;
    CaseStmC   yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("case")) {

      yyResult = pExp(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Exp v1 = yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol1(yyBase);
        if (yyResult.hasValue(":")) {

          yyRepetition1 = yyResult.index;
          yyRepValue1   = SVector.empty();
          while (true) {

            yyResult = pStm(yyRepetition1);
            yyError  = yyResult.select(yyError, yyRepetition1);
            if (yyResult.hasValue()) {
              Stm v$el$1 = yyResult.semanticValue();

              yyRepetition1 = yyResult.index;
              yyRepValue1   = SVector.create(v$el$1, yyRepValue1);
              continue;
            }
            break;
          }
          { // Start scope for v2.
            Vector<Stm> v2 = SVector.reverse(yyRepValue1);

            yyValue = new CaseStmC (v1, v2);

            if (yyValue instanceof Object) {
              setLocation((Object)yyValue, yyStart);
            }
            return new SemanticValue(yyValue, yyRepetition1, yyError);
          } // End scope for v2.
        } else {
          yyError = yyError.select("':' expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("case stm c expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ParametersC.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pParametersC(final int yyStart) throws IOException {
    Result            yyResult;
    int               yyRepetition1;
    Vector<CommTypeLoc> yyRepValue1;
    ParametersC       yyValue;
    ParseError        yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pType(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Type v1 = yyResult.semanticValue();

      yyResult = pLoc(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Loc v2 = yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepValue1   = SVector.empty();
        while (true) {

          yyResult = pCommTypeLoc(yyRepetition1);
          yyError  = yyResult.select(yyError, yyRepetition1);
          if (yyResult.hasValue()) {
            CommTypeLoc v$el$1 = yyResult.semanticValue();

            yyRepetition1 = yyResult.index;
            yyRepValue1   = SVector.create(v$el$1, yyRepValue1);
            continue;
          }
          break;
        }
        { // Start scope for v3.
          Vector<CommTypeLoc> v3 = SVector.reverse(yyRepValue1);

          yyValue = new ParametersC (v1, v2, v3);

          if (yyValue instanceof Object) {
            setLocation((Object)yyValue, yyStart);
          }
          return new SemanticValue(yyValue, yyRepetition1, yyError);
        } // End scope for v3.
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Lit.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pLit(final int yyStart) throws IOException {
    Result     yyResult;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNullLiteralC(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NullLiteralC v1 = yyResult.semanticValue();

      yyValue = new NullLitC (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pCharacterLiteralC(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      CharacterLiteralC v1 = yyResult.semanticValue();

      yyValue = new CharLitC (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 3.

    yyResult = pIntegerLiteralC(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      String v1 = yyResult.semanticValue();

      yyValue = new IntLitC (Integer.parseInt (v1));

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.NullLiteralC.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pNullLiteralC(final int yyStart) throws IOException {
    Result       yyResult;
    NullLiteralC yyValue;
    ParseError   yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("NULL")) {

      yyValue = new NullLiteralC ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("null literal c expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.IntegerLiteralC.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pIntegerLiteralC(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pDecimalNumeral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.IntegerLiteralCForm.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pIntegerLiteralCForm(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '0':
        {
          yyValue = "0";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyResult = pDigits(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyValue = difference(yyStart, yyResult.index);

            return yyResult.createValue(yyValue, yyError);
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("integer literal c form expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.DecimalNumeral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pDecimalNumeral(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '0':
        {
          yyValue = "0";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyResult = pDigits(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyValue = difference(yyStart, yyResult.index);

            return yyResult.createValue(yyValue, yyError);
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("decimal numeral expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.CharacterLiteralC.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pCharacterLiteralC(final int yyStart) throws IOException {
    Result            yyResult;
    int               yyBase;
    CharacterLiteralC yyValue;
    ParseError        yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("\'")) {

      yyResult = pCharacter(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        String v1 = yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol1(yyBase);
        if (yyResult.hasValue("\'")) {

          yyValue = new CharacterLiteralC (v1);

          if (yyValue instanceof Object) {
            setLocation((Object)yyValue, yyStart);
          }
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("'\\\'' expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("character literal c expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Character.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pCharacter(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pCharacterForm(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.CharacterForm.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pCharacterForm(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;
      if (('$' == yyC) ||
          (('-' <= yyC) && (yyC <= '.')) ||
          (('0' <= yyC) && (yyC <= '9')) ||
          (('A' <= yyC) && (yyC <= 'Z')) ||
          ('_' == yyC) ||
          (('a' <= yyC) && (yyC <= 'z'))) {

        yyValue = difference(yyStart, yyIndex);

        return new SemanticValue(yyValue, yyIndex, yyError);
      }
    }

    // Done.
    yyError = yyError.select("character form expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Digits.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pDigits(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    while (true) {

      yyC = character(yyRepetition1);
      if (-1 != yyC) {
        yyIndex = yyRepetition1 + 1;

        switch (yyC) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        default:
          /* No match. */
        }
      }
      break;
    }

    yyValue = difference(yyStart, yyRepetition1);

    return new SemanticValue(yyValue, yyRepetition1, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.NonZeroDigit.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pNonZeroDigit(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyValue = difference(yyStart, yyIndex);

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("non zero digit expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Digit.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pDigit(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyValue = difference(yyStart, yyIndex);

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("digit expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Loc.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pLoc(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fLoc) yyColumn.chunk2.fLoc = pLoc$1(yyStart);
    return yyColumn.chunk2.fLoc;
  }

  /** Actually parse whiley.CI.Loc. */
  private Result pLoc$1(final int yyStart) throws IOException {
    Result     yyResult;
    Loc        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      String v1 = yyResult.semanticValue();

      yyValue = new Loc (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Lab.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pLab(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.CommTypeLoc.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pCommTypeLoc(final int yyStart) throws IOException {
    Result      yyResult;
    CommTypeLoc yyValue;
    ParseError  yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue(",")) {

      yyResult = pType(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Type v1 = yyResult.semanticValue();

        yyResult = pLoc(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Loc v2 = yyResult.semanticValue();

          yyValue = new CommTypeLoc (v1, v2);

          if (yyValue instanceof Object) {
            setLocation((Object)yyValue, yyStart);
          }
          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("comm type loc expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel0.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pExpLevel0(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fExpLevel0) 
      yyColumn.chunk2.fExpLevel0 = pExpLevel0$1(yyStart);
    return yyColumn.chunk2.fExpLevel0;
  }

  /** Actually parse whiley.CI.ExpLevel0. */
  private Result pExpLevel0$1(final int yyStart) throws IOException {
    Result     yyResult;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("!")) {

      yyResult = pExpLevel0(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Exp v1 = yyResult.semanticValue();

        yyValue = new Not (v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("-")) {

      yyResult = pExpLevel0(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Exp v1 = yyResult.semanticValue();

        yyValue = new Neg (v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 3.

    yyResult = pAssign(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyValue = v1;

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 4.

    yyResult = pIncrement(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyValue = new Incr (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 5.

    yyResult = pDecrement(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyValue = new Decr (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 6.

    yyResult = pLoc(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Loc v1 = yyResult.semanticValue();

      yyValue = new Use (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 7.

    yyResult = pLit(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyValue = v1;

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("exp expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel5.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pExpLevel5(final int yyStart) throws IOException {
    Result            yyResult;
    int               yyRepetition1;
    Vector<Action<Exp>> yyRepValue1;
    Exp               yyValue;
    ParseError        yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpLevel4(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = SVector.empty();
      while (true) {

        yyResult = pExpLevel5Tail(yyRepetition1);
        yyError  = yyResult.select(yyError, yyRepetition1);
        if (yyResult.hasValue()) {
          Action<Exp> v$el$1 = yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = SVector.create(v$el$1, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v2.
        Vector<Action<Exp>> v2 = SVector.reverse(yyRepValue1);

        yyValue = ParserSupport.apply(v2, v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v2.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel5Tail.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpLevel5Tail(final int yyStart) throws IOException {
    Result      yyResult;
    Action<Exp> yyValue;
    ParseError  yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol2(yyStart);
    if (yyResult.hasValue("==")) {

      yyResult = pExpLevel4(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            EQ node = new EQ (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pSymbol2(yyStart);
    if (yyResult.hasValue("!=")) {

      yyResult = pExpLevel4(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            NE node = new NE (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("exp level5 tail expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pExpLevel1(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fExpLevel1) 
      yyColumn.chunk2.fExpLevel1 = pExpLevel1$1(yyStart);
    return yyColumn.chunk2.fExpLevel1;
  }

  /** Actually parse whiley.CI.ExpLevel1. */
  private Result pExpLevel1$1(final int yyStart) throws IOException {
    Result     yyResult;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpLevel0(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyResult = pExpLevel1$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<Exp>> v2 = yyResult.semanticValue();

        yyValue = ParserSupport.apply(v2, v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal whiley.CI.ExpLevel1$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpLevel1$$Star1(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fExpLevel1$$Star1) 
      yyColumn.chunk2.fExpLevel1$$Star1 = pExpLevel1$$Star1$1(yyStart);
    return yyColumn.chunk2.fExpLevel1$$Star1;
  }

  /** Actually parse whiley.CI.ExpLevel1$$Star1. */
  private Result pExpLevel1$$Star1$1(final int yyStart) throws IOException {
    Result            yyResult;
    Vector<Action<Exp>> yyValue;
    ParseError        yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpLevel1Tail(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Action<Exp> v$el$1 = yyResult.semanticValue();

      yyResult = pExpLevel1$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<Exp>> v$2 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel1Tail.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpLevel1Tail(final int yyStart) throws IOException {
    Result      yyResult;
    Action<Exp> yyValue;
    ParseError  yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("*")) {

      yyResult = pExpLevel0(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            Mul node = new Mul (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("/")) {

      yyResult = pExpLevel0(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            Div node = new Div (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 3.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("%")) {

      yyResult = pExpLevel0(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            Rem node = new Rem (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("exp level1 tail expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel2.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pExpLevel2(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fExpLevel2) 
      yyColumn.chunk2.fExpLevel2 = pExpLevel2$1(yyStart);
    return yyColumn.chunk2.fExpLevel2;
  }

  /** Actually parse whiley.CI.ExpLevel2. */
  private Result pExpLevel2$1(final int yyStart) throws IOException {
    Result     yyResult;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpLevel1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyResult = pExpLevel2$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<Exp>> v2 = yyResult.semanticValue();

        yyValue = ParserSupport.apply(v2, v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal whiley.CI.ExpLevel2$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpLevel2$$Star1(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fExpLevel2$$Star1) 
      yyColumn.chunk2.fExpLevel2$$Star1 = pExpLevel2$$Star1$1(yyStart);
    return yyColumn.chunk2.fExpLevel2$$Star1;
  }

  /** Actually parse whiley.CI.ExpLevel2$$Star1. */
  private Result pExpLevel2$$Star1$1(final int yyStart) throws IOException {
    Result            yyResult;
    Vector<Action<Exp>> yyValue;
    ParseError        yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpLevel2Tail(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Action<Exp> v$el$1 = yyResult.semanticValue();

      yyResult = pExpLevel2$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<Exp>> v$2 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel2Tail.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpLevel2Tail(final int yyStart) throws IOException {
    Result      yyResult;
    Action<Exp> yyValue;
    ParseError  yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("+")) {

      yyResult = pExpLevel1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            Add node = new Add (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("-")) {

      yyResult = pExpLevel1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            Sub node = new Sub (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("exp level2 tail expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel3.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pExpLevel3(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fExpLevel3) 
      yyColumn.chunk2.fExpLevel3 = pExpLevel3$1(yyStart);
    return yyColumn.chunk2.fExpLevel3;
  }

  /** Actually parse whiley.CI.ExpLevel3. */
  private Result pExpLevel3$1(final int yyStart) throws IOException {
    Result     yyResult;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpLevel2(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyResult = pExpLevel3$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<Exp>> v2 = yyResult.semanticValue();

        yyValue = ParserSupport.apply(v2, v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal whiley.CI.ExpLevel3$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpLevel3$$Star1(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fExpLevel3$$Star1) 
      yyColumn.chunk3.fExpLevel3$$Star1 = pExpLevel3$$Star1$1(yyStart);
    return yyColumn.chunk3.fExpLevel3$$Star1;
  }

  /** Actually parse whiley.CI.ExpLevel3$$Star1. */
  private Result pExpLevel3$$Star1$1(final int yyStart) throws IOException {
    Result            yyResult;
    Vector<Action<Exp>> yyValue;
    ParseError        yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpLevel3Tail(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Action<Exp> v$el$1 = yyResult.semanticValue();

      yyResult = pExpLevel3$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<Exp>> v$2 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel3Tail.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpLevel3Tail(final int yyStart) throws IOException {
    Result      yyResult;
    Action<Exp> yyValue;
    ParseError  yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol2(yyStart);
    if (yyResult.hasValue("<<")) {

      yyResult = pExpLevel2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            Lsh node = new Lsh (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pSymbol2(yyStart);
    if (yyResult.hasValue(">>")) {

      yyResult = pExpLevel2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            ARsh node = new ARsh (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("exp level3 tail expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel4.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pExpLevel4(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fExpLevel4) 
      yyColumn.chunk3.fExpLevel4 = pExpLevel4$1(yyStart);
    return yyColumn.chunk3.fExpLevel4;
  }

  /** Actually parse whiley.CI.ExpLevel4. */
  private Result pExpLevel4$1(final int yyStart) throws IOException {
    Result     yyResult;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpLevel3(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      yyResult = pExpLevel4$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<Exp>> v2 = yyResult.semanticValue();

        yyValue = ParserSupport.apply(v2, v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal whiley.CI.ExpLevel4$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpLevel4$$Star1(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fExpLevel4$$Star1) 
      yyColumn.chunk3.fExpLevel4$$Star1 = pExpLevel4$$Star1$1(yyStart);
    return yyColumn.chunk3.fExpLevel4$$Star1;
  }

  /** Actually parse whiley.CI.ExpLevel4$$Star1. */
  private Result pExpLevel4$$Star1$1(final int yyStart) throws IOException {
    Result            yyResult;
    Vector<Action<Exp>> yyValue;
    ParseError        yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpLevel4Tail(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Action<Exp> v$el$1 = yyResult.semanticValue();

      yyResult = pExpLevel4$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<Exp>> v$2 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.ExpLevel4Tail.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpLevel4Tail(final int yyStart) throws IOException {
    Result      yyResult;
    Action<Exp> yyValue;
    ParseError  yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("<")) {

      yyResult = pExpLevel3(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            LT node = new LT (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pSymbol2(yyStart);
    if (yyResult.hasValue("<=")) {

      yyResult = pExpLevel3(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            LE node = new LE (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 3.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue(">")) {

      yyResult = pExpLevel3(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            GT node = new GT (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 4.

    yyResult = pSymbol2(yyStart);
    if (yyResult.hasValue(">=")) {

      yyResult = pExpLevel3(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Exp v1 = yyResult.semanticValue();

        yyValue = new Action<Exp>() {
          public Exp run (Exp left) {
            GE node = new GE (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("exp level4 tail expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Spacing.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pSpacing(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Result     yyPredResult;
    boolean    yyPredMatched;
    int        yyRepetition1;
    int        yyRepetition2;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    while (true) {

      final int yyChoice1 = yyRepetition1;

      // Nested alternative 1.

      yyC = character(yyChoice1);
      if (-1 != yyC) {
        yyIndex = yyChoice1 + 1;

        switch (yyC) {
        case ' ':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '\t':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '\f':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '\r':
          {
            final int yyChoice2 = yyIndex;

            // Nested alternative 1.

            yyC = character(yyChoice2);
            if ('\n' == yyC) {
              yyIndex = yyChoice2 + 1;

              yyRepetition1 = yyIndex;
              continue;
            }

            // Nested alternative 2.

            yyRepetition1 = yyChoice2;
            continue;
          }

        case '\n':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '/':
          {
            yyC = character(yyIndex);
            if (-1 != yyC) {
              yyIndex = yyIndex + 1;
              if ('/' == yyC) {

                yyRepetition2 = yyIndex;
                while (true) {

                  yyPredMatched = false;

                  yyPredResult = pEOL(yyRepetition2);
                  if (yyPredResult.hasValue()) {

                    yyPredMatched = true;
                  }

                  if (! yyPredMatched) {

                    yyC = character(yyRepetition2);
                    if (-1 != yyC) {
                      yyIndex = yyRepetition2 + 1;

                      yyRepetition2 = yyIndex;
                      continue;
                    }
                  } else {
                    yyError = yyError.select("spacing expected", yyStart);
                  }
                  break;
                }

                final int yyChoice2 = yyRepetition2;

                // Nested alternative 1.

                yyC = character(yyChoice2);
                if (-1 != yyC) {
                  yyIndex = yyChoice2 + 1;

                  switch (yyC) {
                  case '\r':
                    {
                      final int yyChoice3 = yyIndex;

                      // Nested alternative 1.

                      yyC = character(yyChoice3);
                      if ('\n' == yyC) {
                        yyIndex = yyChoice3 + 1;

                        yyRepetition1 = yyIndex;
                        continue;
                      }

                      // Nested alternative 2.

                      yyRepetition1 = yyChoice3;
                      continue;
                    }

                  case '\n':
                    {
                      yyRepetition1 = yyIndex;
                      continue;
                    }

                  default:
                    /* No match. */
                  }
                }

                // Nested alternative 2.

                yyPredMatched = false;

                yyC = character(yyChoice2);
                if (-1 != yyC) {

                  yyPredMatched = true;
                }

                if (! yyPredMatched) {

                  yyRepetition1 = yyChoice2;
                  continue;
                } else {
                  yyError = yyError.select("spacing expected", yyStart);
                }
              }
            }
          }
          break;

        default:
          /* No match. */
        }
      }

      // Nested alternative 2.

      yyResult = pMLComment(yyChoice1);
      yyError  = yyResult.select(yyError, yyRepetition1);
      if (yyResult.hasValue()) {

        yyRepetition1 = yyResult.index;
        continue;
      }
      break;
    }

    yyValue = null;

    return new SemanticValue(yyValue, yyRepetition1, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Space.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pSpace(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case ' ':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '\t':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '\f':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '\r':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if ('\n' == yyC) {
            yyIndex = yyChoice1 + 1;

            yyValue = null;

            return new SemanticValue(yyValue, yyIndex, yyError);
          }

          // Nested alternative 2.

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '\n':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("space expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.EOL.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pEOL(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '\r':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if ('\n' == yyC) {
            yyIndex = yyChoice1 + 1;

            yyValue = null;

            return new SemanticValue(yyValue, yyIndex, yyError);
          }

          // Nested alternative 2.

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '\n':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("EOL expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Comment.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pComment(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Result     yyPredResult;
    boolean    yyPredMatched;
    int        yyRepetition1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('/' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('/' == yyC) {
        yyIndex = yyIndex + 1;

        yyRepetition1 = yyIndex;
        while (true) {

          yyPredMatched = false;

          yyPredResult = pEOL(yyRepetition1);
          if (yyPredResult.hasValue()) {

            yyPredMatched = true;
          }

          if (! yyPredMatched) {

            yyC = character(yyRepetition1);
            if (-1 != yyC) {
              yyIndex = yyRepetition1 + 1;

              yyRepetition1 = yyIndex;
              continue;
            }
          } else {
            yyError = yyError.select("comment expected", yyStart);
          }
          break;
        }

        final int yyChoice1 = yyRepetition1;

        // Nested alternative 1.

        yyC = character(yyChoice1);
        if (-1 != yyC) {
          yyIndex = yyChoice1 + 1;

          switch (yyC) {
          case '\r':
            {
              final int yyChoice2 = yyIndex;

              // Nested alternative 1.

              yyC = character(yyChoice2);
              if ('\n' == yyC) {
                yyIndex = yyChoice2 + 1;

                yyValue = null;

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

              // Nested alternative 2.

              yyValue = null;

              return new SemanticValue(yyValue, yyChoice2, yyError);
            }

          case '\n':
            {
              yyValue = null;

              return new SemanticValue(yyValue, yyIndex, yyError);
            }

          default:
            /* No match. */
          }
        }

        // Nested alternative 2.

        yyPredMatched = false;

        yyC = character(yyChoice1);
        if (-1 != yyC) {

          yyPredMatched = true;
        }

        if (! yyPredMatched) {

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        } else {
          yyError = yyError.select("comment expected", yyStart);
        }
      }
    }

    // Alternative 2.

    yyResult = pMLComment(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyValue = null;

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("comment expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.SLComment.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pSLComment(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyPredResult;
    boolean    yyPredMatched;
    int        yyRepetition1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('/' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('/' == yyC) {
        yyIndex = yyIndex + 1;

        yyRepetition1 = yyIndex;
        while (true) {

          yyPredMatched = false;

          yyPredResult = pEOL(yyRepetition1);
          if (yyPredResult.hasValue()) {

            yyPredMatched = true;
          }

          if (! yyPredMatched) {

            yyC = character(yyRepetition1);
            if (-1 != yyC) {
              yyIndex = yyRepetition1 + 1;

              yyRepetition1 = yyIndex;
              continue;
            }
          } else {
            yyError = yyError.select("s l comment expected", yyStart);
          }
          break;
        }

        final int yyChoice1 = yyRepetition1;

        // Nested alternative 1.

        yyC = character(yyChoice1);
        if (-1 != yyC) {
          yyIndex = yyChoice1 + 1;

          switch (yyC) {
          case '\r':
            {
              final int yyChoice2 = yyIndex;

              // Nested alternative 1.

              yyC = character(yyChoice2);
              if ('\n' == yyC) {
                yyIndex = yyChoice2 + 1;

                yyValue = null;

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

              // Nested alternative 2.

              yyValue = null;

              return new SemanticValue(yyValue, yyChoice2, yyError);
            }

          case '\n':
            {
              yyValue = null;

              return new SemanticValue(yyValue, yyIndex, yyError);
            }

          default:
            /* No match. */
          }
        }

        // Nested alternative 2.

        yyPredMatched = false;

        yyC = character(yyChoice1);
        if (-1 != yyC) {

          yyPredMatched = true;
        }

        if (! yyPredMatched) {

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        } else {
          yyError = yyError.select("s l comment expected", yyStart);
        }
      }
    }

    // Done.
    yyError = yyError.select("s l comment expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.MLComment.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pMLComment(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyPredIndex;
    boolean    yyPredMatched;
    int        yyBase;
    int        yyRepetition1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('/' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('*' == yyC) {
        yyIndex = yyIndex + 1;

        yyRepetition1 = yyIndex;
        while (true) {

          final int yyChoice1 = yyRepetition1;

          // Nested alternative 1.

          yyResult = pMLComment(yyChoice1);
          yyError  = yyResult.select(yyError, yyRepetition1);
          if (yyResult.hasValue()) {

            yyRepetition1 = yyResult.index;
            continue;
          }

          // Nested alternative 2.

          yyPredMatched = false;

          yyC = character(yyChoice1);
          if ('*' == yyC) {
            yyPredIndex = yyChoice1 + 1;

            yyC = character(yyPredIndex);
            if ('/' == yyC) {

              yyPredMatched = true;
            }
          }

          if (! yyPredMatched) {

            yyC = character(yyChoice1);
            if (-1 != yyC) {
              yyIndex = yyChoice1 + 1;

              yyRepetition1 = yyIndex;
              continue;
            }
          } else {
            yyError = yyError.select("m l comment expected", yyStart);
          }
          break;
        }

        yyBase = yyRepetition1;
        yyC    = character(yyBase);
        if ('*' == yyC) {
          yyIndex = yyRepetition1 + 1;

          yyC = character(yyIndex);
          if ('/' == yyC) {
            yyIndex = yyIndex + 1;

            yyValue = null;

            return new SemanticValue(yyValue, yyIndex, yyError);
          } else {
            yyError = yyError.select("'*/' expected", yyBase);
          }
        } else {
          yyError = yyError.select("'*/' expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("m l comment expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Identifier.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pIdentifier(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fIdentifier) 
      yyColumn.chunk3.fIdentifier = pIdentifier$1(yyStart);
    return yyColumn.chunk3.fIdentifier;
  }

  /** Actually parse whiley.CI.Identifier. */
  private Result pIdentifier$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      if (! contains (KEYWORDS, yyValue)) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("identifier expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.Word.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pWord(final int yyStart) throws IOException {
    CIColumn yyColumn = (CIColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fWord) 
      yyColumn.chunk3.fWord = pWord$1(yyStart);
    return yyColumn.chunk3.fWord;
  }

  /** Actually parse whiley.CI.Word. */
  private Result pWord$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWordCharacters(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.WordCharacters.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pWordCharacters(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;
      char h = (char)yyC;

      if (Character.isJavaIdentifierStart (h)) {

        yyRepetition1 = yyIndex;
        while (true) {

          yyC = character(yyRepetition1);
          if (-1 != yyC) {
            yyIndex = yyRepetition1 + 1;
            char t = (char)yyC;

            if (Character.isJavaIdentifierPart (t)) {

              yyRepetition1 = yyIndex;
              continue;
            }
          }
          break;
        }

        yyValue = difference(yyStart, yyRepetition1);

        return new SemanticValue(yyValue, yyRepetition1, yyError);
      }
    }

    // Done.
    yyError = yyError.select("word characters expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal whiley.CI.EOF.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pEOF(final int yyStart) throws IOException {
    int        yyC;
    boolean    yyPredMatched;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyPredMatched = false;

    yyC = character(yyStart);
    if (-1 != yyC) {

      yyPredMatched = true;
    }

    if (! yyPredMatched) {

      yyValue = null;

      return new SemanticValue(yyValue, yyStart, yyError);
    } else {
      yyError = yyError.select("EOF expected", yyStart);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
  * Drop the current path off string when it occurs at the beginning.
  */
  public String dropCurrentPath (String string) {
    int index = 0;
    int stringlen = string.length ();
    String prefix = System.getProperty ("user.dir");
    int prefixlen = prefix.length ();
    while ((index < stringlen) && (index < prefixlen) && (string.charAt (index) == prefix.charAt (index))) {
      index++;
    }
    if ((index != 0) && (string.charAt (index) == java.io.File.separatorChar)) {
      index++;
    }
    return string.substring (index);
  }
  
  /**
  * Format a Rats! parser error message according to Scala compiler
  * conventions for better compatibility with error processors.
  */
  public String formatParseError (ParseError error, Boolean showCoord) throws IOException {
    StringBuilder buf = new StringBuilder ();
    
    if (error.index == -1) {
      buf.append (error.msg);
    } else {
      Location loc = location (error.index);
      if (showCoord) {
        String filename = loc.file;
        buf.append (filename);
        buf.append (':');
        buf.append (loc.line);
        buf.append (": ");
      }
      
      buf.append (error.msg);
      buf.append ("\n");
      
      String line = lineAt (error.index);
      buf.append (line);
      buf.append ('\n');
      for (int i = 1; i < loc.column; i++) buf.append (' ');
      buf.append ("^");
    }
    
    return buf.toString ();
  }
  
  static {
    add (KEYWORDS, new String[] {
      "NULL", "break", "case", "char", "do", "double", "float", "for",
      "if", "int", "long", "return", "short", "switch", "void", "while"
    });
  }

  // =========================================================================

  /**
   * Add the specified values to the specified set.
   *
   * @param set The set.
   * @param values The new values.
   */
  protected static final <T> void add(Set<T> set, T[] values) {
    for (T v : values) set.add(v);
  }

  /**
   * Check whether the specified set contains the specified value.
   *
   * @param set The set.
   * @param value The value.
   * @return <code>true</code> if the set contains the value.
   */
  protected static final <T> boolean contains(Set<T> set, T value) {
    return set.contains(value);
  }

}
