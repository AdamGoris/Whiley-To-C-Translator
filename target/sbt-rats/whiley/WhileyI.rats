module whiley.WhileyI;

header {
    import whiley.WhileyISyntax.*;

    import sbtrats.Action;
    import xtc.tree.Location;
}

body {
    
/**
 * Drop the current path off string when it occurs at the beginning.
 */
public String dropCurrentPath (String string) {
    int index = 0;
    int stringlen = string.length ();
    String prefix = System.getProperty ("user.dir");
    int prefixlen = prefix.length ();
    while ((index < stringlen) && (index < prefixlen) && (string.charAt (index) == prefix.charAt (index))) {
        index++;
    }
    if ((index != 0) && (string.charAt (index) == java.io.File.separatorChar)) {
        index++;
    }
    return string.substring (index);
}

/**
 * Format a Rats! parser error message according to Scala compiler
 * conventions for better compatibility with error processors.
 */
public String formatParseError (ParseError error, Boolean showCoord) throws IOException {
    StringBuilder buf = new StringBuilder ();

    if (error.index == -1) {
        buf.append (error.msg);
    } else {
        Location loc = location (error.index);
        if (showCoord) {
            String filename = loc.file;
            buf.append (filename);
            buf.append (':');
            buf.append (loc.line);
            buf.append (": ");
        }

        buf.append (error.msg);
        buf.append ("\n");

        String line = lineAt (error.index);
        buf.append (line);
        buf.append ('\n');
        for (int i = 1; i < loc.column; i++) buf.append (' ');
        buf.append ("^");
    }

    return buf.toString ();
}
                
    static {
        add (KEYWORDS, new String[] { "bool", "byte", "int" });
    }
}

option setOfString (KEYWORDS), withLocation;


public Program Program =
    Spacing v1:(Stm)* EOF {
        yyValue = new Program (v1);
    }
    ;

public Stm Stm =
    v1:Type v2:Loc {
        yyValue = new Decl (v1, v2);
    }
    ;

public Type Type =
    void:"int":Word {
        yyValue = new IntType ();
    }
    / void:"byte":Word {
        yyValue = new ByteType ();
    }
    / void:"bool":Word {
        yyValue = new BoolType ();
    }
    ;

public String Digits =
    (Digit)*
    ;

public String Digit =
    [0-9]
    ;

public Loc Loc =
    v1:Identifier {
        yyValue = new Loc (v1);
    }
    ;

public String Lab =
    Identifier
    ;

// Default spacing specification
public transient void Spacing   = (Space / Comment)*;


// Default layout specification
public transient void Space     = ' ' / '\t' / '\f' / EOL;
public transient void EOL       = '\r' '\n' / '\r' / '\n';


// Default comment specification
public transient void Comment   = SLComment / MLComment;
public transient void SLComment = "//" (!EOL _)* (EOL / EOF);
public transient void MLComment = "/*" (MLComment / !"*/" _)* "*/";


// Default word specification
public String Identifier =
    Word &{
        ! contains (KEYWORDS, yyValue)
    };

public String Word =
    WordCharacters Spacing;

public transient String WordCharacters =
    h:_ &{
        Character.isJavaIdentifierStart (h)
    } (t:_ &{
        Character.isJavaIdentifierPart (t)
    })*;

public transient void EOF      = !_;