module whiley.WhileyI;

header {
    import whiley.WhileyISyntax.*;

    import sbtrats.Action;
    import xtc.tree.Location;
}

body {
    
/**
 * Drop the current path off string when it occurs at the beginning.
 */
public String dropCurrentPath (String string) {
    int index = 0;
    int stringlen = string.length ();
    String prefix = System.getProperty ("user.dir");
    int prefixlen = prefix.length ();
    while ((index < stringlen) && (index < prefixlen) && (string.charAt (index) == prefix.charAt (index))) {
        index++;
    }
    if ((index != 0) && (string.charAt (index) == java.io.File.separatorChar)) {
        index++;
    }
    return string.substring (index);
}

/**
 * Format a Rats! parser error message according to Scala compiler
 * conventions for better compatibility with error processors.
 */
public String formatParseError (ParseError error, Boolean showCoord) throws IOException {
    StringBuilder buf = new StringBuilder ();

    if (error.index == -1) {
        buf.append (error.msg);
    } else {
        Location loc = location (error.index);
        if (showCoord) {
            String filename = loc.file;
            buf.append (filename);
            buf.append (':');
            buf.append (loc.line);
            buf.append (": ");
        }

        buf.append (error.msg);
        buf.append ("\n");

        String line = lineAt (error.index);
        buf.append (line);
        buf.append ('\n');
        for (int i = 1; i < loc.column; i++) buf.append (' ');
        buf.append ("^");
    }

    return buf.toString ();
}
                
    static {
        add (KEYWORDS, new String[] {
            "all", "assert", "assume", "bool", "break", "byte", "case", "const",
            "continue", "debug", "default", "do", "else", "ensures", "export",
            "fail", "false", "from", "function", "if", "import", "in", "int",
            "is", "method", "native", "no", "null", "package", "private", "public",
            "real", "requires", "return", "skip", "some", "switch", "true",
            "type", "where", "while"
        });
    }
}

option setOfString (KEYWORDS), withLocation;


String Symbol1 =
    Symbol1Alts Spacing;

transient String Symbol1Alts =
    "*" / "\"" / "%" / "}" / "." / "]" / "=" / "<" / "&" / "!" / "|" / ")" /
    "-" / "," / ";" / "'" / "[" / "{" / "0" / "+" / "(" / ":" / "^" / "/" /
    ">";

String Symbol2 =
    Symbol2Alts Spacing;

transient String Symbol2Alts =
    "0b" / "<=" / "<<" / "->" / "||" / ">=" / ">>" / "==" / "[]" / "!=" / "&&";

String Symbol7 =
    Symbol7Alts Spacing;

transient String Symbol7Alts =
    "else if";

String Symbol3 =
    Symbol3Alts Spacing;

transient String Symbol3Alts =
    "==>" / "...";

String Symbol4 =
    Symbol4Alts Spacing;

transient String Symbol4Alts =
    "<==>";

public Program Program =
    Spacing v1:(Stm)* EOF {
        yyValue = new Program (v1);
    }
    ;

public Stm Stm =
    void:"package":Word v1:Loc v2:(DotLoc)* {
        yyValue = new PackageDecl (v1, v2);
    }
    / void:"import":Word v1:LocOrStar void:"from":Word v2:Loc v3:(DotLocOrStar)* {
        yyValue = new ImportDecl (v1, v2, v3);
    }
    / void:"public":Word v1:Stm {
        yyValue = new Public (v1);
    }
    / void:"private":Word v1:Stm {
        yyValue = new Private (v1);
    }
    / void:"native":Word v1:Stm {
        yyValue = new Native (v1);
    }
    / void:"export":Word v1:Stm {
        yyValue = new Export (v1);
    }
    / v1:Type v2:LVal v3:(CommTypeLoc)*  void:"=":Symbol1 v4:Exp v5:(CommExp)* {
        yyValue = new DeclAsgn (v1, v2, v3, v4, v5);
    }
    / v1:Type v2:LVal {
        yyValue = new Decl (v1, v2);
    }
    / v1:Assign {
        yyValue = new Asgn (v1);
    }
    / void:"type":Word v1:Loc  void:"is":Word (void:"(":Symbol1)? v2:Type v3:(Loc)? (void:")":Symbol1)? v4:(WhereExpr)* {
        yyValue = new TypeDecl (v1, v2, Option.apply (v3), v4);
    }
    / void:"const":Word v1:Loc  void:"is":Word v2:Exp {
        yyValue = new ConstDecl (v1, v2);
    }
    / void:"if":Word v1:Exp void:":":Symbol1 v2:(Stm)*  v3:(ElseIf)* v4:(Else)? {
        yyValue = new If (v1, v2, v3, Option.apply (v4));
    }
    / void:"switch":Word v1:Exp void:":":Symbol1 v2:(CaseStm)* {
        yyValue = new Switch (v1, v2);
    }
    / void:"while":Word v1:Exp v2:(WhereExpr)* void:":":Symbol1 v3:(Stm)*  {
        yyValue = new While (v1, v2, v3);
    }
    / void:"do":Word void:":":Symbol1 v1:(Stm)*  void:"while":Word v2:Exp v3:(WhereExpr)* {
        yyValue = new DoWhile (v1, v2, v3);
    }
    / void:"function":Word v1:Loc void:"(":Symbol1 v2:(Parameters)? void:")":Symbol1 v3:(ReturnType)? v4:(RequiresEnsures)* void:":":Symbol1 v5:(Stm)*  {
        yyValue = new FnDecl (v1, Option.apply (v2), Option.apply (v3), v4, v5);
    }
    / void:"method":Word v1:Loc void:"(":Symbol1 v2:(Parameters)? void:")":Symbol1 v3:(ReturnType)? v4:(RequiresEnsures)* void:":":Symbol1 v5:(Stm)*  {
        yyValue = new MthdDecl (v1, Option.apply (v2), Option.apply (v3), v4, v5);
    }
    / void:"return":Word v1:Exp v2:(CommExp)* {
        yyValue = new RtnStm (v1, v2);
    }
    / void:"assert":Word v1:Exp {
        yyValue = new Assert (v1);
    }
    / void:"assume":Word v1:Exp {
        yyValue = new Assume (v1);
    }
    / void:"debug":Word v1:Exp {
        yyValue = new DebugExp (v1);
    }
    / void:"skip":Word {
        yyValue = new SkipStm ();
    }
    / void:"break":Word {
        yyValue = new BreakStm ();
    }
    / void:"continue":Word {
        yyValue = new ContStm ();
    }
    / void:"fail":Word {
        yyValue = new FailStm ();
    }
    ;

public Type Type =
    v1:TermType 
    / v1:UnionType {
        yyValue = new Union (v1);
    }
    / v1:IntersectionType {
        yyValue = new IntrsctnType (v1);
    }
    ;

public Type UnionType =
    v1:IntersectionType v2:(void:"|":Symbol1 IntersectionType)* {
        yyValue = new UnionType (v1, v2);
    }
    ;

public Type IntersectionType =
    v1:TermType v2:(void:"&":Symbol1 TermType)* {
        yyValue = new IntersectionType (v1, v2);
    }
    ;

public Type TermType =
    v1:RecordType {
        yyValue = new RecType (v1);
    }
    / v1:ReferenceType {
        yyValue = new RefType (v1);
    }
    / v1:ArrayType {
        yyValue = new ArrType (v1);
    }
    / v1:NegationType {
        yyValue = new NegType (v1);
    }
    / v1:FunctionType {
        yyValue = new FuncType (v1);
    }
    / v1:MethodType {
        yyValue = new MthdType (v1);
    }
    / void:"(":Symbol1 v1:Type void:")":Symbol1 
    / v1:PrimitiveType 
    / v1:Identifier {
        yyValue = new NmnlType (v1);
    }
    ;

public Type PrimitiveType =
    void:"null":Word {
        yyValue = new NullType ();
    }
    / void:"int":Word {
        yyValue = new IntType ();
    }
    / void:"byte":Word {
        yyValue = new ByteType ();
    }
    / void:"bool":Word {
        yyValue = new BoolType ();
    }
    / void:"real":Word {
        yyValue = new RealType ();
    }
    ;

public Type RecordType =
    void:"{":Symbol1 v1:MixedType v2:(CommMixedType)* void:",":Symbol1 void:"...":Symbol3 void:"}":Symbol1 {
        yyValue = new RecordType (v1, v2);
    }
    ;

public MixedType MixedType =
    v1:Type v2:Loc {
        yyValue = new Mix (v1, v2);
    }
    / void:"function":Word v1:Loc void:"(":Symbol1 v2:Parameters void:")":Symbol1 void:"->":Symbol2 v3:Parameters {
        yyValue = new MixFunc (v1, v2, v3);
    }
    / void:"method":Word v1:Loc void:"(":Symbol1 v2:Parameters void:")":Symbol1 void:"->":Symbol2 v3:Parameters {
        yyValue = new MixMthd (v1, v2, v3);
    }
    ;

public CommMixedType CommMixedType =
    void:",":Symbol1 v1:MixedType {
        yyValue = new CommMixedType (v1);
    }
    ;

public Type ReferenceType =
    void:"&":Symbol1 v1:Type 
    ;

public Type NominalType =
    v1:Identifier {
        yyValue = new NominalType (v1);
    }
    ;

public Type ArrayType =
    v1:PrimitiveType void:"[]":Symbol2 
    ;

public Type NegationType =
    void:"!":Symbol1 v1:Type 
    ;

public Type FunctionType =
    void:"function":Word void:"(":Symbol1 v1:Parameters void:")":Symbol1 void:"->":Symbol2 v2:Parameters {
        yyValue = new FunctionType (v1, v2);
    }
    ;

public Type MethodType =
    void:"method":Word void:"(":Symbol1 v1:Parameters void:")":Symbol1 void:"->":Symbol2 v2:Parameters {
        yyValue = new MethodType (v1, v2);
    }
    ;

public Exp Exp =
    v1:ExpLevel10 
    ;

public Exp Assign =
    v1:LVal  void:"=":Symbol1 v2:Exp {
        yyValue = new Assign (v1, v2);
    }
    ;

public WhereExpr WhereExpr =
    void:"where":Word v1:Exp {
        yyValue = new WhereExp (v1);
    }
    ;

public QuantExp QuantExp =
    v1:NoSomeAll void:"{":Symbol1 v2:Loc void:"in":Word v3:Exp v4:(CommLocInExp)* void:"|":Symbol1 v5:Exp void:"}":Symbol1 {
        yyValue = new QuantExp (v1, v2, v3, v4, v5);
    }
    ;

public NoSomeAll NoSomeAll =
    void:"no":Word {
        yyValue = new No ();
    }
    / void:"some":Word {
        yyValue = new Some ();
    }
    / void:"all":Word {
        yyValue = new All ();
    }
    ;

public ElseIf ElseIf =
    void:"else if":Symbol7 v1:Exp void:":":Symbol1 v2:(Stm)* {
        yyValue = new ElseIf (v1, v2);
    }
    ;

public Else Else =
    void:"else":Word void:":":Symbol1 v1:(Stm)* {
        yyValue = new Else (v1);
    }
    ;

public CaseStm CaseStm =
    void:"case":Word v1:Exp v2:(CommExp)* void:":":Symbol1 v3:(Stm)*  {
        yyValue = new Case (v1, v2, v3);
    }
    / void:"default":Word void:":":Symbol1 v1:(Stm)*  {
        yyValue = new DefaultCase (v1);
    }
    ;

public RequiresEnsures RequiresEnsures =
    void:"requires":Word v1:Exp {
        yyValue = new Requires (v1);
    }
    / void:"ensures":Word v1:Exp {
        yyValue = new Ensures (v1);
    }
    ;

public Parameters Parameters =
    v1:TypeLoc v2:(CommTypeLoc)* {
        yyValue = new Params (v1, v2);
    }
    / v1:Type {
        yyValue = new TypeParam (v1);
    }
    ;

public ReturnType ReturnType =
    void:"->":Symbol2 void:"(":Symbol1 v1:Parameters void:")":Symbol1 {
        yyValue = new RtnParams (v1);
    }
    / void:"->":Symbol2 v1:Type {
        yyValue = new RtnType (v1);
    }
    ;

public Exp Lit =
    v1:NullLiteral {
        yyValue = new NullLit (v1);
    }
    / v1:ByteLiteral {
        yyValue = new ByteLit (v1);
    }
    / v1:IntegerLiteral {
        yyValue = new IntLit (Integer.parseInt (v1));
    }
    / v1:BooleanLiteral {
        yyValue = new BoolLit (v1);
    }
    / v1:CharacterLiteral {
        yyValue = new CharLit (v1);
    }
    / v1:StringLiteral {
        yyValue = new StringLit (v1);
    }
    ;

public NullLiteral NullLiteral =
    void:"null":Word {
        yyValue = new NullLiteral ();
    }
    ;

public Exp ByteLiteral =
    void:"0b":Symbol2 v1:(Bit)* {
        yyValue = new ByteLiteral (v1);
    }
    ;

public String IntegerLiteral =
    IntegerLiteralForm Spacing
    ;

public String IntegerLiteralForm =
    DecimalNumeral
    ;

public String DecimalNumeral =
    "0"
    / NonZeroDigit Digits
    ;

public Exp BooleanLiteral =
    void:"false":Word {
        yyValue = new False ();
    }
    / void:"true":Word {
        yyValue = new True ();
    }
    ;

public CharacterLiteral CharacterLiteral =
    void:"'":Symbol1 v1:Character void:"'":Symbol1 {
        yyValue = new CharacterLiteral (v1);
    }
    ;

public StringLiteral StringLiteral =
    void:"\"":Symbol1 v1:(Character)* void:"\"":Symbol1 {
        yyValue = new StringLiteral (v1);
    }
    ;

public String Character =
    CharacterForm Spacing
    ;

public String CharacterForm =
    [\-a-zA-Z$._0-9]
    ;

public String Digits =
    (Digit)*
    ;

public String NonZeroDigit =
    [1-9]
    ;

public String Digit =
    [0-9]
    ;

public String Bit =
    [0|1]
    ;

public LVal LVal =
    v1:Loc void:".":Symbol1 v2:Identifier {
        yyValue = new FieldAsgn (v1, v2);
    }
    / v1:Loc void:"[":Symbol1 v2:Exp void:"]":Symbol1 {
        yyValue = new ListAsgn (v1, v2);
    }
    / void:"*":Symbol1 v1:Exp {
        yyValue = new Pointer (v1);
    }
    / v1:Identifier {
        yyValue = new IdnAsgn (v1);
    }
    ;

public Loc Loc =
    v1:Identifier {
        yyValue = new Loc (v1);
    }
    ;

public Exp Length =
    void:"|":Symbol1 v1:Loc void:"|":Symbol1 {
        yyValue = new Len (v1);
    }
    ;

public String Lab =
    Identifier
    ;

public CommExp CommExp =
    void:",":Symbol1 v1:Exp {
        yyValue = new CommExp (v1);
    }
    ;

public CommLoc CommLoc =
    void:",":Symbol1 v1:Loc {
        yyValue = new CommLoc (v1);
    }
    ;

public CommLocInExp CommLocInExp =
    void:",":Symbol1 v1:Loc void:"in":Word v2:Exp {
        yyValue = new CommLocInExp (v1, v2);
    }
    ;

public CommLit CommLit =
    void:",":Symbol1 v1:Lit {
        yyValue = new CommLit (v1);
    }
    ;

public CommTypeLoc CommTypeLoc =
    void:",":Symbol1 v1:TypeLoc {
        yyValue = new CommTypeLoc (v1);
    }
    ;

public DotLoc DotLoc =
    void:".":Symbol1 v1:Loc {
        yyValue = new DotLoc (v1);
    }
    ;

public LocOrStar LocOrStar =
    void:"*":Symbol1 {
        yyValue = new ImpAll ();
    }
    / v1:Loc {
        yyValue = new Spcfc (v1);
    }
    ;

public DotLocOrStar DotLocOrStar =
    void:".":Symbol1 v1:LocOrStar {
        yyValue = new DotLocOrStar (v1);
    }
    ;

public TypeLoc TypeLoc =
    v1:Type v2:Loc {
        yyValue = new TypeLoc (v1, v2);
    }
    ;

public Exp ExpLevel0 =
    void:"!":Symbol1 v1:ExpLevel0 {
        yyValue = new Not (v1);
    }
    / void:"-":Symbol1 v1:ExpLevel0 {
        yyValue = new Neg (v1);
    }
    / v1:Loc void:"(":Symbol1 v2:Exp void:")":Symbol1 {
        yyValue = new FunctionCall (v1, v2);
    }
    / void:"(":Symbol1 v1:Exp void:")":Symbol1 
    / void:"[":Symbol1 v1:Exp void:";":Symbol1 v2:Exp void:"]":Symbol1 {
        yyValue = new ArrGen (v1, v2);
    }
    / void:"[":Symbol1 v1:(Exp void:",":Symbol1)* v2:Exp void:"]":Symbol1 {
        yyValue = new ArrInit (v1, v2);
    }
    / v1:Assign 
    / v1:Length 
    / v1:QuantExp {
        yyValue = new QuantifierExp (v1);
    }
    / v1:Loc {
        yyValue = new Use (v1);
    }
    / v1:Lit 
    ;

public Exp ExpLevel5 =
    v1:ExpLevel4 v2:(ExpLevel5Tail)* {
        yyValue = ParserSupport.apply(v2, v1);
    }
    ;

constant Action<Exp> ExpLevel5Tail =
     void:"==":Symbol2 v1:ExpLevel4 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                EQ node = new EQ (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    /  void:"!=":Symbol2 v1:ExpLevel4 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                NE node = new NE (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    ;

public Exp ExpLevel10 =
    v1:ExpLevel9 v2:(ExpLevel10Tail)* {
        yyValue = ParserSupport.apply(v2, v1);
    }
    ;

constant Action<Exp> ExpLevel10Tail =
     void:"<==>":Symbol4 v1:ExpLevel9 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                Iff node = new Iff (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    ;

public Exp ExpLevel1 =
    v1:ExpLevel0 v2:(ExpLevel1Tail)* {
        yyValue = ParserSupport.apply(v2, v1);
    }
    ;

constant Action<Exp> ExpLevel1Tail =
     void:"*":Symbol1 v1:ExpLevel0 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                Mul node = new Mul (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    /  void:"/":Symbol1 v1:ExpLevel0 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                Div node = new Div (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    /  void:"%":Symbol1 v1:ExpLevel0 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                Rem node = new Rem (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    / void:"[":Symbol1 v1:ExpLevel0 void:"]":Symbol1 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                ArrAccess node = new ArrAccess (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    / void:",":Symbol1 v1:ExpLevel0 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                ExpList node = new ExpList (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    ;

public Exp ExpLevel6 =
    v1:ExpLevel5 v2:(ExpLevel6Tail)* {
        yyValue = ParserSupport.apply(v2, v1);
    }
    ;

constant Action<Exp> ExpLevel6Tail =
     void:"&&":Symbol2 v1:ExpLevel5 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                And node = new And (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    /  void:"&":Symbol1 v1:ExpLevel5 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                BitWiseAnd node = new BitWiseAnd (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    ;

public Exp ExpLevel9 =
    v1:ExpLevel8 v2:(ExpLevel9Tail)* {
        yyValue = ParserSupport.apply(v2, v1);
    }
    ;

constant Action<Exp> ExpLevel9Tail =
     void:"==>":Symbol3 v1:ExpLevel8 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                Implies node = new Implies (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    ;

public Exp ExpLevel2 =
    v1:ExpLevel1 v2:(ExpLevel2Tail)* {
        yyValue = ParserSupport.apply(v2, v1);
    }
    ;

constant Action<Exp> ExpLevel2Tail =
     void:"+":Symbol1 v1:ExpLevel1 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                Add node = new Add (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    /  void:"-":Symbol1 v1:ExpLevel1 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                Sub node = new Sub (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    ;

public Exp ExpLevel7 =
    v1:ExpLevel6 v2:(ExpLevel7Tail)* {
        yyValue = ParserSupport.apply(v2, v1);
    }
    ;

constant Action<Exp> ExpLevel7Tail =
     void:"^":Symbol1 v1:ExpLevel6 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                Xor node = new Xor (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    ;

public Exp ExpLevel3 =
    v1:ExpLevel2 v2:(ExpLevel3Tail)* {
        yyValue = ParserSupport.apply(v2, v1);
    }
    ;

constant Action<Exp> ExpLevel3Tail =
     void:"<<":Symbol2 v1:ExpLevel2 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                Lsh node = new Lsh (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    /  void:">>":Symbol2 v1:ExpLevel2 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                ARsh node = new ARsh (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    ;

public Exp ExpLevel8 =
    v1:ExpLevel7  void:"||":Symbol2 v2:ExpLevel7 {
        yyValue = new Or (v1, v2);
    }
    / v1:ExpLevel7 
    ;

public Exp ExpLevel4 =
    v1:ExpLevel3 v2:(ExpLevel4Tail)* {
        yyValue = ParserSupport.apply(v2, v1);
    }
    ;

constant Action<Exp> ExpLevel4Tail =
     void:"<":Symbol1 v1:ExpLevel3 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                LT node = new LT (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    /  void:"<=":Symbol2 v1:ExpLevel3 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                LE node = new LE (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    /  void:">":Symbol1 v1:ExpLevel3 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                GT node = new GT (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    /  void:">=":Symbol2 v1:ExpLevel3 {
        yyValue = new Action<Exp>() {
            public Exp run (Exp left) {
                GE node = new GE (left, v1);
                copyLocation(node, left);
                return node;
            };
        };
    }
    ;

// Default spacing specification
public transient void Spacing   = (Space / Comment)*;


// Default layout specification
public transient void Space     = ' ' / '\t' / '\f' / EOL;
public transient void EOL       = '\r' '\n' / '\r' / '\n';


// Default comment specification
public transient void Comment   = SLComment / MLComment;
public transient void SLComment = "//" (!EOL _)* (EOL / EOF);
public transient void MLComment = "/*" (MLComment / !"*/" _)* "*/";


// Default word specification
public String Identifier =
    Word &{
        ! contains (KEYWORDS, yyValue)
    };

public String Word =
    WordCharacters Spacing;

public transient String WordCharacters =
    h:_ &{
        Character.isJavaIdentifierStart (h)
    } (t:_ &{
        Character.isJavaIdentifierPart (t)
    })*;

public transient void EOF      = !_;