module whiley.WhileyI;

header {
    import whiley.WhileyISyntax.*;
}

Program =
  Spacing Stm* EOF.

Stm {line} =
    "package" Loc DotLoc*                                                                     {PackageDecl}
  | "import" LocOrStar "from" Loc DotLocOrStar*                                               {ImportDecl}
  | Modifier Stm                                                                               {Modify}
	|	Type Loc CommTypeLoc* sp "=" Exp CommExp*                                                 {DeclAsgn}
  | Type Loc                                                                                  {Decl}
  | Assign                                                                                    {Asgn}
  | "type" Loc sp "is" TypeLoc WhereExpr*                                                     {TypeDeclVar}
  | "type" Loc sp "is" Type WhereExpr*                                                        {TypeDeclType}
  | "type" Loc sp "is" FnType WhereExpr*                                                      {TypeDeclFn}
  | "const" Loc "is" Exp                                                                      {ConstDecl}                                                                  
  | "if" '(' Exp ')' ':' nest (Stm)\n ElseIf* Else?                                           {If}
  | "switch" Exp ':' CaseStm                                                                  {Switch}
  | "while" '(' Exp ')' ':' nest (Stm)\n                                                      {While}
  | "do" ':' nest (Stm)\n "while" nest (Exp) WhereExpr*                                       {DoWhile}
  | "function" Loc '(' Parameters? ')' ReturnType? RequiresEnsures* ':' nest (Stm)\n     			{FnDecl}
  | "method" Loc '(' Parameters? ')' ReturnType? RequiresEnsures* ':' nest (Stm)\n       			{MthdDecl} 
  | "return" Exp CommExp*                                                                     {RtnStm}
  | "assert" Exp                                                                              {AssertExp}
  | "assume" Exp                                                                              {AssumeExp}
  | "skip"                                                                                    {SkipStm}
  | "break"                                                                                   {BreakStm}
  | "continue"                                                                                {ContStm}
  | "fail"                                                                                    {FailStm}.

Type = 
    "int" "[]"?                                                                               {IntType}
  | "byte" "[]"?                                                                              {ByteType}
  | "bool" "[]"?                                                                              {BoolType}.

RefType =
    '&' Type                                                                                  {ReferenceType}.

Exp {paren} = 
		Exp sp "|" Exp																																						{Or, none, 8}
  |	Exp sp "^" Exp																																						{Xor, left, 7}
  |	Exp sp "&&" Exp																																						{And, left, 6}
  |	Exp sp "==" Exp                                                                           {EQ, left, 5}
  | Exp sp "!=" Exp                                                                           {NE, left, 5}
  | Exp sp "<"  Exp                                                                           {LT, left, 4}
  | Exp sp "<=" Exp                                                                           {LE, left, 4}
  | Exp sp ">"  Exp                                                                           {GT, left, 4}
  | Exp sp ">=" Exp                                                                           {GE, left, 4}
  | Exp sp "<<" Exp                                                                           {Lsh, left, 3}
  | Exp sp ">>" Exp                                                                           {ARsh, left, 3}
  | Exp sp "+" Exp                                                                            {Add, left, 2}
  | Exp sp "-" Exp                                                                            {Sub, left, 2}
  | Exp sp "*" Exp                                                                            {Mul, left, 1}
  | Exp sp "/" Exp                                                                            {Div, left, 1}
  | Exp sp "%" Exp                                                                            {Rem, left, 1}
  | '!' Exp                                                                                   {Not}
  | '(' Exp ')'
	| Assign
	| Length
	| Loc                                                                                       {Use}
	|	Lit.

Assign : Exp = 
    LVal sp "=" Exp.

WhereExpr =
    "where" Exp                                                                               {WhereExp}.

FnType = 
    "function" '(' Type ')' '->' Type.

ElseIf = 
    "else if" Exp ':' nest (Stm).

Else =
    "else" ':' nest (Stm).

CaseStm = 
		"case" Exp CommExp* ':' nest (Stm)\n																											{Case}
	| "default" ':' nest (Stm)\n	                                                              {DefaultCase}.

RequiresEnsures = 
		"requires" Exp																																						{Requires}
	| "ensures" Exp																																							{Ensures}.

Parameters = 
    TypeLoc CommTypeLoc*                                                                      {Params}
  | Type                                                                                      {TypeParam}.

ReturnType = 
    '->' '(' Parameters ')'                                                                   {RtnParams}
  | '->' Type                                                                                 {RtnType}.

Modifier =
	  "public"																																									{Public}
	| "private"																																									{Private}
	| "native"																																									{Native}
	| "export"                                                                                  {Export}.

Lit : Exp =
		NullLiteral																																								{NullLit}
  | ByteLiteral																																								{ByteLit}
  | IntegerLiteral                                                                            {IntLit, 1: Integer.parseInt : Int}
  | BooleanLiteral																																						{BoolLit}.
	//| CharacterLiteral																																					{CharLit}
	//| StringLiteral																																							{StringLit}.

NullLiteral =
		'null'.

ByteLiteral : Exp = 
  	'0b' Bit*.

IntegerLiteral : Token =
    DecimalNumeral.

DecimalNumeral : String =
    '0'
  | NonZeroDigit Digits.

BooleanLiteral : Exp =
    'false'                                                                                    {False}
  | 'true'                                                                                     {True}.
/*
CharacterLiteral = 
		"'" Character "'".

Character = 
		Letter
	| Digit.

StringLiteral =
		'"' Character* '"'.
*/
Digits : String = 
		Digit*.

NonZeroDigit : String =
    [1-9].

Digit : String =
		[0-9].

Bit : String = 
    [0|1].

// Used in Assign and DeclAsgn Statements
LVal = 
		Loc '.' Identifier 																		                                      {FieldAsgn}
	| Loc '[' Exp ']'																				                                      {ListAsgn}	
	| '*' Exp																								                                      {Pointer}
	| Identifier																						                                      {IdnAsgn}.

Loc = 
    Identifier.

Length : Exp = 
		'|' Loc '|'																						                                      {Len}.

Lab : String =
		Identifier.

CommLoc =
    ',' Loc.

DotLoc =
    '.' Loc.

LocOrStar = 
    '*'                                                                                          {All}
  | Loc                                                                                          {Spc}.

DotLocOrStar = 
    '.' LocOrStar.

TypeLoc = 
    Type Loc.

CommTypeLoc = 
    ',' TypeLoc.

CommExp = 
    ',' Exp.