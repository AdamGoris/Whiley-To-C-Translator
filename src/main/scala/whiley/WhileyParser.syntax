module whiley.WhileyI;

header {
    import whiley.WhileyISyntax.*;
}

Program =
  Spacing Stm* EOF.

Stm {line} =
		Type Loc sp "=" Exp		  {DeclAsgn}
  | Type Loc sp             {Decl}
  | Assign                  {AsgnStm}.

Type = 
    "int"   								{IntType}
  | "byte"  								{ByteType}
  | "bool"  								{BoolType}.

Exp {paren} = 
    Lit
  | Loc                     {Use}
  | Assign
  | Exp sp "==" Exp         {EQ, left, 5}
  | Exp sp "!=" Exp         {NE, left, 5}
  | Exp sp "<"  Exp         {LT, left, 4}
  | Exp sp "<=" Exp         {LE, left, 4}
  | Exp sp ">"  Exp         {GT, left, 4}
  | Exp sp ">=" Exp         {GE, left, 4}
  | Exp sp "<<" Exp         {Lsh, left, 3}
  | Exp sp ">>" Exp         {ARsh, left, 3}
  | Exp sp "+" Exp          {Add, left, 2}
  | Exp sp "-" Exp          {Sub, left, 2}
  | Exp sp "*" Exp          {Mul, left, 1}
  | Exp sp "/" Exp          {Div, left, 1}
  | Exp sp "%" Exp          {Rem, left, 1}
  | '!' Exp                 {Not}
  | '(' Exp ')'.

Assign : Exp = 
    Loc sp "=" Exp.

Lit : Exp =
    ByteLiteral
  | IntegerLiteral          {IntLit, 1: Integer.parseInt : Int}
  | BooleanLiteral.


IntegerLiteral : Token =
    DecimalNumeral.

ByteLiteral : Exp = 
    '0b' Bit*.

BooleanLiteral : Exp =
    'false'                 {False}
  | 'true'                  {True}.

DecimalNumeral : String =
    '0'
  | NonZeroDigit Digits.

Digits : String = 
		Digit*.

NonZeroDigit : String =
    [1-9].

Digit : String =
		[0-9].

Bit : String = 
    [0-1].

Loc = 
    Identifier.

Lab : String =
		Identifier.